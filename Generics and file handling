Generics 
1. What are Generics in Java?
Generics in Java are used to provide type safety and reduce code redundancy by allowing the use of
generic types. It allows classes, methods, and interfaces to be written generically, without specifying the type of
data being used.
2.What are the benefits of using Generics in Java?
The benefits of using Generics in Java are:
Type safety
Code reusability
Improved readability
Reduced code redundancy
Improved performance
3. What is a Generic Class in Java?
A Generic Class in Java is a class that can work with different types of data. It is defined using a type
parameter enclosed in angle brackets, which represents the type of data being used.
4. What is a Type Parameter in Java Generics?
A Type Parameter in Java Generics is a placeholder for the type of data that is used by a generic class or
method. It is defined using a single uppercase letter enclosed in angle brackets, such as <T> or <E>.
5. What is a Generic Method in Java?
A Generic Method in Java is a method that can work with different types of data. It is defined using a type
parameter enclosed in angle brackets, which represents the type of data being used.
6. What is the difference between ArrayList and ArrayList<T>?
ArrayList is a non-generic class, while ArrayList<T> is a generic class. ArrayList<T> provides type safety, as it
can only store elements of the specified type, whereas ArrayList can store any type of element.


   IO Operation  File handling 
1. What is Input and Output Stream in Java?
Ans: A stream can be defined as a sequence of data. The InputStream is used to read data from a source and
the MutputStream is used for writing data to a destinationP
2. What are the methods of OutputStream4
L write() - writes the specified byte to the output streamO
L write(byte[] array) - writes the bytes from the specified array to the output streamO
L flush() - forces to write all data present in the output stream to the destinationO
L close() - closes the output streamP
3. What is serialization in Java?
Ans: Serialization is the process of converting an object into a stream of bytes to transfer it over a network or to
store it in a file or database. In Java, serialization is done by implementing the Serializable interfaceP
4. What is the Serializable interface in Java?
Ans: The Serializable interface in Java is a marker interface that has no methods. It is used to mark classes that
can be serialized, meaning their object instances can be converted into a stream of bytesP
5. What is deserialization in Java?
Ans: Deserialization is the process of converting a stream of bytes back into an object instance. This is done
after an object has been serializedP
6. How is serialization achieved in Java?
Ans: Serialization is achieved in Java by implementing the Serializable interface. When an object is serialized, its
state is converted into a stream of bytes, which can then be transferred over a network or stored in a file or
databaseP
7. How is deserialization achieved in Java?
Ans: Deserialization is achieved in Java by reading a stream of bytes and using them to recreate the original
object instance. This is done by calling the readMbject() method of an MbjectInputStream instanceP
8. How can you avoid certain member variables of class from getting Serialized?
Ans: Mark member variables as static or transient, and those member variables will no more be a part of
SerializationP
9. What classes are available in the Java IO File Classes API?
Ans: The following classes are available in the Java IM API and are important to work with files in JavaP
File
RandomAccessFile
FileInputStream
FileReader
FileMutputStream
FileWriter
